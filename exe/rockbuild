#!/usr/bin/env ruby

require 'thor'
require 'rockbuild'

cwd = File.expand_path('../', __FILE__)

# Require rockbuild
Dir["#{cwd}/../lib/**/*.rb"].each { |pkg| require pkg }

# Require all the packages
Dir["#{cwd}/../packages/**/*.rb"].each { |pkg| require pkg }

# Require all the projects
Dir["#{cwd}/../projects/**/*.rb"].each { |project| require project }

Dir["./packages/**/*.rb"].each { |pkg| require pkg }
Dir["./projects/**/*.rb"].each { |proj| require proj }

$stdout.sync = true

require "#{cwd}/../projects/demo_project"

#DemoProject.new.start

class RockbuildCLI < Thor


  desc 'projects', 'list available projects'
  def projects
    projs = Rockbuild::Project.descendants
    puts "All projects:"
    projs.each do |p|
      puts "  #{p.to_s}"
    end
  end

  desc 'packages', 'list available packages'
  def packages
    pkgs = Rockbuild::Package.descendants
    puts "All packages:"
    pkgs.each do |p|
      puts "  #{p.to_s}"
    end
  end

  method_option :dry_run, :type => :boolean, :default => false, :aliases => "-n", :desc => "Dry run"
  method_option :quiet, :type => :boolean, :default => false, :aliases => "-q", :desc => "Quiet"
  desc 'build PROJECT', 'build a project'
  def build(name)
    projects = Rockbuild::Project.descendants
    project = projects.find do |p|
      p.to_s.gsub(/Project$/, '').downcase == name.downcase || name.downcase == p.to_s.downcase
    end

    puts "Dry run" if (options[:dry_run])

    if project.nil?
      puts "Could not find a project named '#{name}'."
    else
      Env.with_settings(options) { project.new.start }
    end
  end
end

RockbuildCLI.start(ARGV)
